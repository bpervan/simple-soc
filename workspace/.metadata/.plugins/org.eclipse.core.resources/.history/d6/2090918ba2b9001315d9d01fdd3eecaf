/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "led_axi_ip.h"
#include "xgpio.h"
#include "uart_cntrl.h"
#include "xparameters.h"
#include "xstatus.h"

void printUart(const char* ulaz, int numChar);
void usleep(unsigned int useconds);

int main()
{
	XGpio dip;
	XStatus status;
	int dip_state;
	Xuint32 volatile readBuffer;
	const char poruka[18] = "Pozdrav svijetu :)";

	status = XGpio_Initialize(&dip, XPAR_AXI_GPIO_0_DEVICE_ID);
	if(status != XST_SUCCESS){
		return XST_FAILURE;
	}

	/*UART_CNTRL_mWriteReg(XPAR_UART_CNTRL_0_BASEADDR, 0, 0x51);
	usleep(500000);
	UART_CNTRL_mWriteReg(XPAR_UART_CNTRL_0_BASEADDR, 1, 0x6F);
	usleep(500000);
	UART_CNTRL_mWriteReg(XPAR_UART_CNTRL_0_BASEADDR, 2, 0x70);
	usleep(500000);
	UART_CNTRL_mWriteReg(XPAR_UART_CNTRL_0_BASEADDR, 3, 0x71);
	usleep(500000);
	UART_CNTRL_mWriteReg(XPAR_UART_CNTRL_0_BASEADDR, 4, 0x72);*/

	printUart(poruka, 18);

	while(1){
		XGpio_SetDataDirection(&dip, 1, 0xFF);
		dip_state = XGpio_DiscreteRead(&dip, 1);
		LED_AXI_IP_mWriteReg(XPAR_LED_AXI_IP_0_BASEADDR, 0, dip_state);
		readBuffer = UART_CNTRL_mReadReg(XPAR_UART_CNTRL_0_BASEADDR, i, (u32) ulaz[i]);
	}

    return 0;
}

void usleep(unsigned int useconds)
{
  int i,j;
  for (j=0;j<useconds;j++)
    for (i=0;i<15;i++) asm("nop");
}


void printUart(const char * ulaz, int numChar){
	int i;
	for(i = 0; i < numChar; ++i){
		UART_CNTRL_mWriteReg(XPAR_UART_CNTRL_0_BASEADDR, i, (u32) ulaz[i]);
		usleep(10000);
	}
}


